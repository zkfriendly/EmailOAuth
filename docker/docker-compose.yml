services:
  node:
    image: ethereum/client-go:v1.13.5
    ports:
      - "${NODE_PORT}:8545"
    command: [
      "--miner.gaslimit", "12000000",
      "--http", "--http.api", "personal,eth,net,web3,debug",
      "--http.vhosts", "*,localhost,host.docker.internal", "--http.addr", "0.0.0.0",
      "--allow-insecure-unlock", "--rpc.allow-unprotected-txs",
      "--dev",
      "--verbosity", "2",
      "--nodiscover", "--maxpeers", "0", "--mine",
      "--networkid", "1337"
    ]
  
  scanner:
    image: otterscan/otterscan:latest
    ports:
      - "${SCANNER_PORT}:80"

  smtp_server_1:
    build:
      context: .
      dockerfile: Dockerfile.smtp
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=${SMTP_INTERNAL_SERVER_PORT}
      - SMTP_DOMAIN_NAME=${SMTP_DOMAIN_NAME}
      - SMTP_LOGIN_ID=${SMTP_LOGIN_ID}
      - SMTP_LOGIN_PASSWORD=${SMTP_LOGIN_PASSWORD}
      - MESSAGE_ID_DOMAIN=${SMTP_MESSAGE_ID_DOMAIN}
      - JSON_LOGGER=${SMPT_JSON_LOGGER}
    ports:
      - "${SMTP_PORT}:${SMTP_INTERNAL_SERVER_PORT}"
    command: ["relayer-smtp"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SMTP_INTERNAL_SERVER_PORT}/api/ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  imap:
    build:
      context: .
      dockerfile: Dockerfile.imap
    environment:
      - RELAYER_ENDPOINT=http://host.docker.internal:8000/api/receiveEmail
      - IMAP_LOGIN_ID=${IMAP_LOGIN_ID}
      - IMAP_LOGIN_PASSWORD=${IMAP_LOGIN_PASSWORD}
      - IMAP_DOMAIN_NAME=${IMAP_DOMAIN_NAME}
      - IMAP_PORT=${IMAP_PORT}
      - AUTH_TYPE=${IMAP_AUTH_TYPE}
      - JSON_LOGGER=${IMAP_JSON_LOGGER}
    command: ["relayer-imap"]

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=${POSTGRES_DB:-relayer}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: [
      "postgres",
      "-c", "listen_addresses=*",
    ]

  bundler:
    build:
      context: .
      dockerfile: Dockerfile.bundler
    ports:
      - "${BUNDLER_PORT}:${BUNDLER_PORT}"
    command:
      ["yarn", "run", "bundler", "--network", "http://node:${NODE_PORT}"]
    depends_on:
      - node
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BUNDLER_PORT}/"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  # relayer:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.relayer
  #   ports:
  #     - "8000:8000"
  #   command: ["/bin/bash", "-c", "apt-get update && apt-get install -y iputils-ping zsh git && sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" && cargo run"]
  #   depends_on:
  #     smtp_server_1:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}@postgres:5432/${POSTGRES_DB:-relayer}
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8000/api/healthz || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - relayer_network

volumes:
  postgres_data:
